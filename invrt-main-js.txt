// INVRT Website - Main JavaScript
// ================================

// Utility Functions
const utils = {
  // Debounce function for performance
  debounce: (func, wait) => {
    let timeout;
    return function executedFunction(...args) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  },

  // Throttle function for scroll events
  throttle: (func, limit) => {
    let inThrottle;
    return function(...args) {
      if (!inThrottle) {
        func.apply(this, args);
        inThrottle = true;
        setTimeout(() => inThrottle = false, limit);
      }
    };
  },

  // Check if element is in viewport
  isInViewport: (element) => {
    const rect = element.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  }
};

// Navigation Module
const navigation = {
  init() {
    this.navbar = document.getElementById('navbar');
    this.mobileMenuButton = document.getElementById('mobile-menu-button');
    this.setupScrollEffects();
    this.setupMobileMenu();
    this.setupSmoothScroll();
  },

  setupScrollEffects() {
    let lastScrollY = window.scrollY;
    
    const handleScroll = utils.throttle(() => {
      const currentScrollY = window.scrollY;
      
      // Add/remove shadow on scroll
      if (currentScrollY > 50) {
        this.navbar.classList.add('shadow-lg');
      } else {
        this.navbar.classList.remove('shadow-lg');
      }
      
      // Hide/show navbar on scroll
      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        this.navbar.style.transform = 'translateY(-100%)';
      } else {
        this.navbar.style.transform = 'translateY(0)';
      }
      
      lastScrollY = currentScrollY;
    }, 100);
    
    window.addEventListener('scroll', handleScroll);
  },

  setupMobileMenu() {
    if (!this.mobileMenuButton) return;
    
    this.mobileMenuButton.addEventListener('click', () => {
      const existingMenu = document.getElementById('mobile-menu');
      
      if (existingMenu) {
        this.closeMobileMenu(existingMenu);
      } else {
        this.createMobileMenu();
      }
    });
  },

  createMobileMenu() {
    const menu = document.createElement('div');
    menu.id = 'mobile-menu';
    menu.className = 'mobile-menu fixed right-0 top-0 h-full w-64 bg-white shadow-lg md:hidden z-50';
    
    const currentPage = window.location.pathname.split('/').pop() || 'index.html';
    
    menu.innerHTML = `
      <div class="p-6">
        <button id="close-menu" class="mb-8" aria-label="Close menu">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
        <nav class="space-y-4">
          <a href="index.html" class="block text-gray-900 hover:text-gray-600 ${currentPage === 'index.html' ? 'font-medium' : ''}">Home</a>
          <a href="philosophy.html" class="block text-gray-900 hover:text-gray-600 ${currentPage === 'philosophy.html' ? 'font-medium' : ''}">Philosophy</a>
          <a href="advisory.html" class="block text-gray-900 hover:text-gray-600 ${currentPage === 'advisory.html' ? 'font-medium' : ''}">Services</a>
          <a href="insights.html" class="block text-gray-900 hover:text-gray-600 ${currentPage === 'insights.html' ? 'font-medium' : ''}">Insights</a>
          <a href="clients.html" class="block text-gray-900 hover:text-gray-600 ${currentPage === 'clients.html' ? 'font-medium' : ''}">Clients</a>
          <a href="contact.html" class="block mt-6 text-center px-5 py-2.5 bg-gray-900 text-white">
            Start a Conversation
          </a>
        </nav>
      </div>
    `;
    
    document.body.appendChild(menu);
    
    // Force reflow and add active class
    setTimeout(() => {
      menu.classList.add('active');
      
      // Setup close button
      const closeBtn = document.getElementById('close-menu');
      closeBtn.addEventListener('click', () => this.closeMobileMenu(menu));
      
      // Close on link click
      menu.querySelectorAll('a').forEach(link => {
        link.addEventListener('click', () => this.closeMobileMenu(menu));
      });
      
      // Close on outside click
      menu.addEventListener('click', (e) => {
        if (e.target === menu) {
          this.closeMobileMenu(menu);
        }
      });
    }, 10);
  },

  closeMobileMenu(menu) {
    menu.classList.remove('active');
    setTimeout(() => menu.remove(), 300);
  },

  setupSmoothScroll() {
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
      anchor.addEventListener('click', function(e) {
        e.preventDefault();
        const targetId = this.getAttribute('href');
        const target = document.querySelector(targetId);
        
        if (target) {
          const offset = 80; // Account for fixed navbar
          const targetPosition = target.offsetTop - offset;
          
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
      });
    });
  }
};

// Animations Module
const animations = {
  init() {
    this.setupScrollReveals();
    this.setupParallax();
    this.setupHoverEffects();
  },

  setupScrollReveals() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          
          // Add stagger effect for children
          const children = entry.target.querySelectorAll('.stagger-item');
          children.forEach((child, index) => {
            setTimeout(() => {
              child.classList.add('visible');
            }, index * 100);
          });
        }
      });
    }, observerOptions);
    
    // Observe all elements with scroll-reveal class
    document.querySelectorAll('.scroll-reveal').forEach(el => {
      observer.observe(el);
    });
  },

  setupParallax() {
    const parallaxElements = document.querySelectorAll('.parallax');
    
    if (parallaxElements.length === 0) return;
    
    const handleParallax = utils.throttle(() => {
      parallaxElements.forEach(el => {
        const speed = el.dataset.speed || 0.5;
        const yPos = -(window.scrollY * speed);
        el.style.transform = `translateY(${yPos}px)`;
      });
    }, 16);
    
    window.addEventListener('scroll', handleParallax);
  },

  setupHoverEffects() {
    // Add ripple effect to buttons
    document.querySelectorAll('button, .btn').forEach(button => {
      button.addEventListener('click', function(e) {
        const ripple = document.createElement('span');
        ripple.className = 'ripple';
        this.appendChild(ripple);
        
        const rect = this.getBoundingClientRect();
        const size = Math.max(rect.width, rect.height);
        const x = e.clientX - rect.left - size / 2;
        const y = e.clientY - rect.top - size / 2;
        
        ripple.style.width = ripple.style.height = size + 'px';
        ripple.style.left = x + 'px';
        ripple.style.top = y + 'px';
        
        setTimeout(() => ripple.remove(), 600);
      });
    });
  }
};

// Forms Module
const forms = {
  init() {
    this.setupContactForm();
    this.setupNewsletterForms();
  },

  setupContactForm() {
    const contactForm = document.querySelector('#contact-form');
    if (!contactForm) return;
    
    contactForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const submitButton = contactForm.querySelector('button[type="submit"]');
      const originalText = submitButton.textContent;
      
      // Show loading state
      submitButton.disabled = true;
      submitButton.textContent = 'Sending...';
      submitButton.classList.add('loading');
      
      // Collect form data
      const formData = new FormData(contactForm);
      const data = Object.fromEntries(formData);
      
      try {
        // Here you would integrate with your backend
        // For now, we'll simulate a successful submission
        await this.simulateFormSubmission(data);
        
        // Show success message
        this.showNotification('Thank you for your message. We\'ll be in touch within 2 business days.', 'success');
        
        // Reset form
        contactForm.reset();
      } catch (error) {
        // Show error message
        this.showNotification('There was an error sending your message. Please try again.', 'error');
      } finally {
        // Reset button state
        submitButton.disabled = false;
        submitButton.textContent = originalText;
        submitButton.classList.remove('loading');
      }
    });
  },

  setupNewsletterForms() {
    document.querySelectorAll('.newsletter-form').forEach(form => {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const emailInput = form.querySelector('input[type="email"]');
        const email = emailInput.value;
        
        try {
          await this.simulateFormSubmission({ email, type: 'newsletter' });
          this.showNotification('Thank you for subscribing! Check your email for confirmation.', 'success');
          emailInput.value = '';
        } catch (error) {
          this.showNotification('There was an error subscribing. Please try again.', 'error');
        }
      });
    });
  },

  simulateFormSubmission(data) {
    // Simulate API call
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        console.log('Form submitted:', data);
        resolve();
      }, 1500);
    });
  },

  showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `fixed top-24 right-4 z-50 p-4 rounded-lg shadow-lg max-w-sm transform translate-x-full transition-transform duration-300 ${
      type === 'success' ? 'bg-green-600 text-white' : 
      type === 'error' ? 'bg-red-600 text-white' : 
      'bg-gray-900 text-white'
    }`;
    
    notification.innerHTML = `
      <div class="flex items-center">
        <span class="flex-1">${message}</span>
        <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.parentElement.remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;
    
    document.body.appendChild(notification);
    
    // Slide in
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 10);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      notification.style.transform = 'translateX(100%)';
      setTimeout(() => notification.remove(), 300);
    }, 5000);
  }
};

// Analytics Module (placeholder for future integration)
const analytics = {
  init() {
    // Track page views
    this.trackPageView();
    
    // Track events
    this.setupEventTracking();
  },

  trackPageView() {
    // Integration with Google Analytics, Plausible, etc.
    console.log('Page view:', window.location.pathname);
  },

  setupEventTracking() {
    // Track CTA clicks
    document.querySelectorAll('[data-track]').forEach(element => {
      element.addEventListener('click', () => {
        const action = element.dataset.track;
        this.trackEvent('click', action);
      });
    });
  },

  trackEvent(category, action, label = null) {
    console.log('Event tracked:', { category, action, label });
  }
};

// Initialize everything when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  navigation.init();
  animations.init();
  forms.init();
  analytics.init();
});

// Handle dynamic content loading
window.addEventListener('load', () => {
  // Remove loading classes
  document.body.classList.remove('loading');
  
  // Trigger initial animations
  document.querySelectorAll('.fade-in').forEach(el => {
    el.style.opacity = '1';
  });
});

// Export for use in other scripts if needed
window.INVRT = {
  utils,
  navigation,
  animations,
  forms,
  analytics
};